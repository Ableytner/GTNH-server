name: Check for new daily release

on:
  workflow_dispatch:
  schedule:
    - cron: '0 4 * * *' # 4:00am UTC every day

jobs:
  check:
    runs-on: [self-hosted, linux]
    outputs:
      gtnh_version: ${{ steps.fetch-version.outputs.vers }}
      daily_version: ${{ steps.fetch-daily.outputs.vers }}
    steps:
    - name: check if latest daily build failed
      run: |
        curl --fail-with-body -L -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -H "X-GitHub-Api-Version: 2022-11-28" https://api.github.com/repos/GTNewHorizons/DreamAssemblerXXL/actions/workflows/daily-modpack-build.yml/runs?per_page=1 \
        | jq -r ".workflow_runs[0] | .conclusion" \
        | [[ $(cat -) != "success" ]] \
        && echo "latest daily build didn't succeed, exiting..." \
        && exit 1 \
        || echo "latest daily build succeeded"
    - id: fetch-version
      name: get latest gtnh version
      run: |
        curl --fail-with-body -L -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -H "X-GitHub-Api-Version: 2022-11-28" https://api.github.com/repos/GTNewHorizons/GT-New-Horizons-Modpack/tags?per_page=100 \
        | jq -r ".[] | .name" \
        | grep -oP "^(\d+\.\d+\.\d+)" \
        | head -n 1 \
        | echo "vers=$(cat -)" >> "$GITHUB_OUTPUT"
    - id: fetch-daily
      name: get latest daily version number
      run: |
        curl --fail-with-body -L -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -H "X-GitHub-Api-Version: 2022-11-28" https://api.github.com/repos/GTNewHorizons/DreamAssemblerXXL/actions/workflows/daily-modpack-build.yml/runs?per_page=1 \
        | jq -r ".workflow_runs[0] | .run_number" \
        | echo "vers=$(cat -)" >> "$GITHUB_OUTPUT"
    - name: print modpack version number
      run: |
        [[ ${{ steps.fetch-version.outputs.vers }} == "" ]] \
        && echo "modpack version number is empty, exiting..." \
        && exit 1 \
        || echo "Found modpack version ${{ steps.fetch-version.outputs.vers }}"
    - name: print latest daily version number
      run: |
        [[ ${{ steps.fetch-daily.outputs.vers }} == "" ]] \
        && echo "daily version number is empty, exiting..." \
        && exit 1 \
        || echo "Found latest daily version ${{ steps.fetch-daily.outputs.vers }}"

  build:
    needs: [check]
    runs-on: [self-hosted, linux]
    steps:
    - uses: actions/checkout@v3
    - name: lowercase github.repository
      run: |
        echo "IMAGE_NAME=`echo ${{github.repository}} | tr '[:upper:]' '[:lower:]'`" >>${GITHUB_ENV}
    - name: Build
      run: |
        docker build --build-arg GTNH_VERSION=${{ needs.check.outputs.gtnh_version}} GTNH_DAILY_BUILD=${{ needs.check.outputs.daily_version }} -t ${{ env.IMAGE_NAME }}:latest --secret id=github_token,env=GITHUB_TOKEN .
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Export
      run: |
        docker save -o /tmp/image.tar ${{ env.IMAGE_NAME }}:latest
    - name: Cache docker image
      run: |
        curl --fail-with-body -X POST -F "file=@/tmp/image.tar" -F "project_id=gtnh-server" -F "issue_id=1" http://192.168.0.145:25000/dump
    - name: Remove local image
      run: |
        docker image rm ${{ env.IMAGE_NAME }}

  test:
    needs: [check, build]
    runs-on: [self-hosted, linux]
    steps:
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: "3.12"
    - name: Install tzdata
      run: |
        sudo ln -snf /usr/share/zoneinfo/$(curl --fail-with-body \"https://ipapi.co/timezone\") /etc/localtime
        sudo apt-get update
        DEBIAN_FRONTEND=noninteractive sudo apt-get -y install tzdata
    - name: Set up pipx
      # see https://stackoverflow.com/a/63153978/15436169 for more info
      run: |
        sudo apt-get update
        sudo apt-get -y install pipx
    - name: install mcstatus
      run: |
        pipx install mcstatus==11.1.1
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: lowercase github.repository
      run: |
        echo "IMAGE_NAME=`echo ${{github.repository}} | tr '[:upper:]' '[:lower:]'`" >>${GITHUB_ENV}
    - name: Download cached docker image
      run: |
        curl --fail-with-body -X GET http://192.168.0.145:25000/attachments/gtnh-server/1/image.tar -o /tmp/image.tar
    - name: Load image
      run: |
        docker load --input /tmp/image.tar
    - name: Create server container
      run: |
        docker create --name minecraft-gtnh3 -p 25565:25565 -e MEMORY=8G -e MOTD='GT New Horizons MODPACK_VERSION-dailyDAILY_BUILD' -e EULA=TRUE -e WEBMAP=TRUE ${{ env.IMAGE_NAME }}:latest \
        | echo "CONTAINER_ID=`echo $(cat -)`" >>${GITHUB_ENV}
    - name: Start server container
      run: |
        docker start ${{ env.CONTAINER_ID }}
    - name: Wait for server to start
      run: |
        declare -i c=300 \
        && while (( c > 0 )); do
          pipx run mcstatus==11.1.1 127.0.0.1 ping && break
          (( c -= 10 ))
          sleep 10
        done
        if (( c <= 0 )); then
          exit 1
        fi
    - name: Read MOTD
      run: |
        pipx run mcstatus==11.1.1 127.0.0.1 status \
        | grep -oP "(?<=raw\=\').+(?=\', bedrock=False)" \
        | echo "MOTD=`echo $(cat -)`" >>${GITHUB_ENV}
    - name: Check MOTD GTNH version
      run: |
        echo ${{ env.MOTD }} \
        | grep -oP "(?<=GT New Horizons ).+(?=-)" \
        | [[ $(cat -) == ${{ needs.check.outputs.gtnh_version }} ]]
    - name: Check MOTD daily version
      run: |
        echo ${{ env.MOTD }} \
        | grep -oP "(?<=-daily).+$" \
        | [[ $(cat -) == ${{ needs.check.outputs.daily_version }} ]]
    - name: Print out server container logs
      if: failure()
      run: |
        docker logs ${{ env.CONTAINER_ID }}
    - name: Stop and delete server container
      if: always()
      run: |
        docker rm -f ${{ env.CONTAINER_ID }}
    - name: Remove cached docker image on failure
      if: failure()
      run: |
        curl --fail-with-body -X DELETE http://192.168.0.145:25000/attachments/gtnh-server/1/image.tar

  push:
    needs: [check, test]
    runs-on: [self-hosted, linux]
    permissions:
      contents: read
      packages: write
    steps:
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: lowercase github.repository
      run: |
        echo "IMAGE_NAME=`echo ${{github.repository}} | tr '[:upper:]' '[:lower:]'`" >>${GITHUB_ENV}
    - name: Download cached docker image
      run: |
        curl --fail-with-body -X GET http://192.168.0.145:25000/attachments/gtnh-server/1/image.tar -o /tmp/image.tar
    - name: Load image
      run: |
        docker load --input /tmp/image.tar
    - name: Push daily
      run: |
        docker tag ${{ env.IMAGE_NAME }}:latest ghcr.io/${{ env.IMAGE_NAME }}:daily-${{ needs.check.outputs.daily_version }}
        docker push ghcr.io/${{ env.IMAGE_NAME }}:daily-${{ needs.check.outputs.daily_version }}
        docker tag ghcr.io/${{ env.IMAGE_NAME }}:daily-${{ needs.check.outputs.daily_version }} ghcr.io/${{ env.IMAGE_NAME }}:daily
        docker push ghcr.io/${{ env.IMAGE_NAME }}:daily
    - name: Remove local image
      if: always()
      run: |
        docker image rm ${{ env.IMAGE_NAME }}
    - name: Remove cached docker image
      if: always()
      run: |
        curl --fail-with-body -X DELETE http://192.168.0.145:25000/attachments/gtnh-server/1/image.tar
